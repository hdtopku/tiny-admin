version: '3.8'  # Use the appropriate version for your Docker Compose file

networks:
  my_network:
    driver: bridge

services:
  mysql:
    image: mysql:8.0.40
    container_name: mysql
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --lower_case_table_names=1
      --explicit_defaults_for_timestamp=true
      --max_allowed_packet=128M
      --authentication_policy=caching_sha2_password
    restart: always
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} # Set the root password
    ports:
      - 3306:3306
    volumes:
      - ~/mydata/mysql/data/db:/var/lib/mysql # Data volume
      - ~/mydata/mysql/conf:/etc/mysql/conf.d # Config volume
      - ~/mydata/mysql/log:/var/log/mysql # Log volume
      - ~/mydata/mysql/sql/tiny_admin.sql:/tiny_admin.sql # SQL script
    networks:
      - my_network

  redis:
    image: redis:latest                  # Use the latest version of the Redis image
    container_name: redis                # Container name
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} # Set Redis password from an environment variable
    ports:
      - 6379:6379                        # Map host port 6379 to container port 6379
    volumes:
      - ~/mydata/redis/data:/data        # Persist Redis data on the host
    restart: always                      # Automatically restart the Redis container
    networks:
      - my_network

  nginx:
    image: nginx:latest                  # Use the latest version of the Nginx image
    container_name: nginx                # Container name
    ports:
      - 80:80                            # Map host port 80 to container port 80
    volumes:
      - ~/mydata/nginx/conf:/etc/nginx   # Mount custom configuration files
      - ~/mydata/nginx/html:/usr/share/nginx/html # Mount static files
      - ~/mydata/nginx/logs:/var/log/nginx # Persist Nginx logs on the host
    restart: always                      # Automatically restart the Nginx container
    networks:
      - my_network

  springboot:
    # Use a custom-built Docker image
    build:
        context: ../../tiny-boot            # Build context, pointing to the project directory
        dockerfile: Dockerfile              # Use a custom Dockerfile
    container_name: tiny_admin
    volumes:
      - ../../tiny-boot:/usr/src/app       # Mount the local Spring Boot project
    working_dir: /usr/src/app/tiny-admin/tiny-admin-starter
    command: mvn spring-boot:run           # Run the Spring Boot application
    ports:
      - "8080:8080"                        # Map port 8080
    networks:
      - my_network                         # Use a custom network
    environment:
      - SPRING_PROFILES_ACTIVE=prod        # Optional environment variable, specify the Spring Profile
